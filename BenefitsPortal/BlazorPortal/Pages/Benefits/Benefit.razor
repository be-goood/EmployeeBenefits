@page "/benefits/Benefit"

@using BenefitsPortal.Domain.Models
@using BenefitsPortal.Domain.Interfaces
@inject IEBenefitsRepository eBenefitsRepository

<h1>Overview of employee benefits</h1>


<div class="col-12">
    <h3><b>Add New Employee</b></h3>
    <hr />

    <EditForm Model="@employee" OnValidSubmit="@CreateEmployee">
        @*<DataAnnotationsValidator />*@

        <div class="col-12 row">
            <label class="col-2 font-weight-bold">First name :</label>
            <input @ref="publisherNameTextBox" class="form-control col-3" @bind="employee.EmployeeName" placeholder="First name" />
            &nbsp;<ValidationMessage For="@(() => employee.EmployeeName)" />
        </div>
        <br />
        <div class="col-12 row">
            <label class="col-2 font-weight-bold">Last name :</label>
            <input @ref="publisherNameTextBox" class="form-control col-3" @bind="employee.EmployeeName" placeholder="Last name" />
            &nbsp;<ValidationMessage For="@(() => employee.EmployeeName)" />
        </div>
        <br />
        <div class="col-12 row">
            <span class="col-2"></span>
            <button type="submit" class="form-control col-1 btn btn-primary" @onclick="@(async () => await CreateEmployee())">Create</button>
        </div>

    </EditForm>

</div>
<br />

@if (eMedBenefits == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Employee Name</th>
                <th>Dependents</th>
                <th>Base Employee Cost</th>
                <th>Employee Discount Amount</th>
                <th>Total Employee Cost</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var eb in eMedBenefits)
            {
                <tr>
                    <td>@eb.EmployeeName</td>
                    <td>@eb.Dependents</td>
                    <td>@eb.BaseEmployeeCost</td>
                    <td>@eb.EmployeeDiscountAmount</td>
                    <td>@eb.TotalEmployeeCost</td>
                    <td>
                        <a href='/benefits/employee/edit/@eb.EmployeeId'>Edit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<MedicalBenefit> eMedBenefits;
    private MedicalBenefit employee = new MedicalBenefit();
    ElementReference publisherNameTextBox;

    protected override async Task OnInitializedAsync()
    {
        eMedBenefits = await eBenefitsRepository.GetEmployeeMedBenefitsTestAsync();
    }

    private async Task CreateEmployee()
    {
        await Task.Run(() =>
        {
        });
    }
}
